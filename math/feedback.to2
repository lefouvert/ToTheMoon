use { current_time } from ksp::game
use { clamp } from core::math

pub struct Derivative(minimumElapsedTime: float = 0.01) {
    minDt: float = minimumElapsedTime
    lastMeasure: float = 0
    lastTime: float = 0
    lastResult: float = 0
}

impl Derivative {
    sync fn compute(self, measure:float) -> float = {
        const t = current_time()
        const dT = t - self.lastTime
        if(dT > self.minDt) {
            const dM = measure - self.lastMeasure
            self.lastMeasure = measure
            self.lastTime = t
            self.lastResult = dM/dT
        }
        self.lastResult
    }
}

pub struct Pid(Pgain: float, Igain: float, Dgain: float, validityCriterion: float = 0.0, minOutput: float = 0.0, maxOutput: float = 1.0, minTimeSpan: float = 1e-2) {
    Pgain: float = Pgain
    Igain: float = Igain
    Dgain: float = Dgain
    minTimeSpan: float = minTimeSpan
    lastP: float = 0.0
    lastI: float = 0.0
    lastD: float = 0.0
    lastT: float = current_time()
    t0: float = current_time()
    minOutput: float = minOutput
    maxOutput: float = maxOutput
    lastOutput: float = minOutput
    validityCriterion: float = validityCriterion
}

impl Pid {
    sync fn is_valid(self, criterion: float) -> bool =
        (self.validityCriterion == criterion)

    sync fn is_siphon(self, minCycle: int = 10) -> bool =
        ((self.lastT - self.t0) > (self.minTimeSpan * minCycle))

    sync fn compute(self, measure: float, aim: float) -> float = {
        const t = current_time()
        const dT = t - self.lastT
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid compute")
        if(dT > self.minTimeSpan) {
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid timespan ok")
            const P = aim - measure
            let I = self.lastI + (dT * (P + self.lastP) / 2)
            const D = (P - self.lastP) / dT

            //prevent I windup
            I = clamp(I, self.minOutput / self.Igain, self.maxOutput / self.Igain)

            const output = clamp((P * self.Pgain + I * self.Igain + D * self.Dgain), self.minOutput, self.maxOutput)
            // const output = clamp((P * self.Pgain + I * self.Igain + D * self.Dgain), 0.0, 1.0)
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid P:" + P.to_fixed(2) + " I:" + I.to_fixed(2) + " D:" + D.to_fixed(2))
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid Pg:" + (P *self.Pgain).to_fixed(2) + " Ig:" + (I *self.Igain).to_fixed(2) + " Dg:" + (D *self.Dgain).to_fixed(2))
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid gains Pg:" + self.Pgain.to_fixed(2) + " Ig:" + self.Igain.to_fixed(2) + " Dg:" + self.Dgain.to_fixed(2))
// ksp::console::CONSOLE.print_line(t.to_fixed(2) + " pid output:" + output.to_fixed(2))
            //register
            self.lastP = P
            self.lastI = I
            self.lastD = D
            self.lastT = t
            self.lastOutput = output
        }

        self.lastOutput
    }
}