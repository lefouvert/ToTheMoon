use { Vessel } from ksp::vessel
use { Orbit, GeoCoordinates } from ksp::orbit
use { GlobalVector, Direction } from ksp::math
use { max, min, clamp, clamp_degrees180, clamp_degrees360, sin_deg, cos_deg, asin_deg, acos_deg, atan2_deg, log, abs } from core::math

use { Circle, Sign } from math::constant
use { AscentProfile, AscentProfileConst } from maneuver::constant
use { Ship } from ship::ship


// dvToMass ?

pub sync fn deviation (aimDir: Direction, actualDir : Direction) -> float = {
    return aimDir.vector.angle_to(actualDir.vector)
} // TODO YAGNI

pub sync fn ascent_angle(currentApoapsis: float, aimedAlt:float, profile: AscentProfileConst) -> float = {
    if(profile == AscentProfile.Trigonometric)
        return acos_deg(clamp((currentApoapsis/ aimedAlt) - 1, -1, 1)) - Circle.Quarter
    Circle.Quarter - max(0.0, log(currentApoapsis * (Circle.Quarter / aimedAlt) + 1)) * (Circle.Quarter / log(Circle.Quarter))
    // TODO gravity turn
}

pub sync fn latitude_from_angle(angle: float) -> float =
    asin_deg(sin_deg(angle))


pub sync fn compassFromOrbit(ship: Vessel, orbit: Orbit) -> float = { // reliable from stabilized LAN
    const sign = if (orbit.inclination > Circle.Quarter) Sign.Negative else Sign.Positive
    clamp_degrees360(sign * acos_deg(sin_deg(orbit.inclination) * cos_deg(ship.geo_coordinates.longitude - orbit.LAN)))
}

pub sync fn compassFromDirection(vessel: Vessel, direction: Direction) -> float = {
    const x = vessel.north.dot(direction.vector)
    const y = vessel.east.dot(direction.vector)
    const compass = atan2_deg(y, x)
    clamp_degrees360(compass)
}

pub sync fn expected_LAN(coord: GeoCoordinates, inclination: float) -> Option<float> = {
    if(abs(coord.latitude) > latitude_from_angle(inclination))
        return None()
    const longitudeShift = asin_deg(sin_deg(coord.latitude) / sin_deg(latitude_from_angle(inclination)))
    Some(clamp_degrees360(coord.longitude - longitudeShift))
}

pub sync fn burntime(ship: Ship, deltaV: float) -> float = {
    const stages = ship.stages
        .map(fn(s) -> (dV: s.deltaV(), bt: s.burntime()))
        .filter(fn(s) -> s.dV > 0.0)
        .reverse()

    let time = 0.0
    let deltaVLeft = deltaV

    for (s in stages) {
        const dVBurn = min(deltaVLeft / s.dV, 1.0)
        time += dVBurn * s.bt
        deltaVLeft -= dVBurn
        // if (deltaVLeft > 0.0) time += 1.0 // relative to time to stage
    }
    time
}

// pub sync fn expected_longitude(latitude: float, orbit: Orbit) -> Option<(ascendingNodeSide: float, descendingNodeSide: float)> = {
//     if(abs(latitude) > latitude_from_angle(orbit.inclination))
//         return None()
//     const longitudeShift = asin_deg(sin_deg(latitude) / sin_deg(latitude_from_angle(orbit.inclination)))
//     return (ascendingNodeSide: clamp_degrees360(orbit.LAN + longitudeShift), descendingNodeSide: clamp_degrees360(orbit.LAN + Circle.Semi - longitudeShift))
// }
