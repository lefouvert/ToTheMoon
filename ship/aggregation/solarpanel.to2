use { Vessel, Part, DeployableDeployState } from ksp::vessel
use { Vec3, vec3, GlobalVector } from ksp::math

use { Circle, Array } from math::constant
use { almost_equal_global } from math::vector
use { round_at } from math::rounding


const accuracy: int = 2

// record of :
// vector going from command module to theorical ideal sun direction. Magnitude is expected EC output not considering blocking bodies or parts, or Star ratio/distance.
// vector to align with sun's first child normal to orbit
// vector are local to celestial_frame
pub sync fn ideal_exposure(vessel: Vessel) -> (exposure: Vec3, normal: Vec3) = {
    const frame = vessel.control_frame

    if (!vessel.parts.exists(fn(p) -> p.solar_panel.defined && p.deployable.value.deploy_state == DeployableDeployState.Extended)) // No operational solar panel
        return (exposure: vessel.global_up.to_local(frame), normal: vessel.global_facing.to_local(frame).vector)

    const solarPanelParts = vessel.parts
        .filter(fn(p) -> p.solar_panel.defined)
        .filter(fn(p) -> p.deployable.value.deploy_state == DeployableDeployState.Extended)

    const staticRotaries = group_statics_as_rotaries(solarPanelParts.filter(fn(p) -> !p.deployable.value.extendable))
    const trueStatic = solarPanelParts.filter(fn(p) -> !p.deployable.value.extendable)
        .filter(fn(ps) -> !staticRotaries.exists(fn(psr_arr) -> psr_arr.exists(fn(psr) -> ps.position == psr.position))) // TODO use part.id when available
    const staticLightVector = trueStatic
        .map(fn(p) -> - p.global_rotation.to_local(frame).right_vector.normalized * p.solar_panel.value.base_flow_rate) // coaxial to light vector, mag = max EC flow
        .reduce(vec3(0.0, 0.0, 0.0), fn(vsum, v) -> vsum + v)

    const lightRotaries = solarPanelParts.filter(fn(p) -> p.deployable.value.extendable)
        .map(fn(p) -> - p.global_rotation.to_local(frame).right_vector.normalized * p.solar_panel.value.base_flow_rate) // normal to light plane, mag = max EC flow
        + enlight_static_as_rotaries(staticRotaries)
    if (lightRotaries.length == 0)
        return (exposure: staticLightVector, normal: random_normal(trueStatic))

    const lightPlanes = aggregate_rotaries_as_plane(lightRotaries)

    const intersectCount = (((lightPlanes.length - 1)**2) + (lightPlanes.length - 1)) / 2 // triangular number
    if(intersectCount == 0) {
        const rotaryLightVector =
            if(staticLightVector.magnitude > 0.0)
                (staticLightVector - (lightPlanes[Array.First].normalized * lightPlanes[Array.First].dot(staticLightVector))) // rotary light vector oriented mostly at static light vector (projection of static vector on rotary plane)
            else if(lightPlanes[Array.First].dot(vec3(1.0, 0.0, 0.0)) != lightPlanes[Array.First].magnitude)
                lightPlanes[Array.First].cross(vec3(1.0, 0.0, 0.0))
            else
                lightPlanes[Array.First].cross(vec3(0.0, 1.0, 0.0))
        return (exposure: staticLightVector + rotaryLightVector, normal: staticLightVector.exclude_from(lightPlanes[Array.First] + random_normal(trueStatic)))
    }
    const intersectPlanes = (0..lightPlanes.length)
        .flat_map(fn(i) -> ((i + 1)..lightPlanes.length).map(fn(j) -> lightPlanes[i].cross(lightPlanes[j]).normalized * (lightPlanes[i].magnitude + lightPlanes[j].magnitude)))

    const allLightVector = fasten_sum_unoriented_vectors(intersectPlanes, staticLightVector) + staticLightVector
    const allLightVectorNormal = allLightVector.exclude_from(fasten_sum_unoriented_vectors(lightPlanes, staticLightVector))

    (exposure: allLightVector, normal: allLightVectorNormal)
}


sync fn group_statics_as_rotaries(staticSolarPanels: Part[]) -> Part[][] = {
    if(staticSolarPanels.length < 2)
        return []

    (0..staticSolarPanels.length)
        .flat_map(fn(i) -> ((i + 1)..staticSolarPanels.length).map(fn(j) -> normal_for_partpair(staticSolarPanels[i], staticSolarPanels[j])))
        .reduce(<(parts: Part[], normalId: GlobalVector)>[], group_by_normal)
        .map(fn(r) -> r.parts)
        .filter(exclude_asymetric_enlightenment)
        .sort_by(fn(a) -> a.length)
        .reverse()
        // .reduce(<Part[]>[], deduplicate) // TODO
        .reduce(<Part[]>[], fn(clean, partArr) -> {
            if(clean.length == Array.Empty)
                return clean + partArr
            return clean + partArr.filter(fn(part) -> !clean.flat_map(fn(a) -> a).exists(fn(p) -> p.position == part.position)) // TODO prefer a part.id than a part.position when it will be available
        }) // deduplicate
        .filter(fn(a) -> a.length > Array.Empty)
}

sync fn normal_for_partpair(partA: Part, partB: Part) -> (partA: Part, partB: Part, normal: GlobalVector) = (
            partA: partA,
            partB: partB,
            normal: (- partA.global_rotation.right_vector)
                .cross(- partB.global_rotation.right_vector)
                .normalized * (partA.solar_panel.value.base_flow_rate + partB.solar_panel.value.base_flow_rate)
)

sync fn group_by_normal(groups: (parts: Part[], normalId: GlobalVector)[], partPair: (partA: Part, partB: Part, normal: GlobalVector)) -> (parts: Part[], normalId: GlobalVector)[] = {
    if(groups.length == Array.Empty) // init
        return [(parts: [partPair.partA, partPair.partB], normalId: partPair.normal)]
    if(groups.exists(fn(g) -> almost_equal_global(g.normalId, partPair.normal, partPair.partA.vessel.control_frame, accuracy))) // grow
        return groups.map(fn(g) -> {
            if(almost_equal_global(g.normalId, partPair.normal, partPair.partA.vessel.control_frame, accuracy)) { // to group up
                if(g.parts.exists(fn(p) -> p.position == partPair.partA.position) && (!g.parts.exists(fn(p) -> p.position == partPair.partB.position))) // TODO prefer a part.id than a part.position when it will be available
                    return (parts: g.parts + partPair.partB, normalId: g.normalId)
                if(g.parts.exists(fn(p) -> p.position == partPair.partB.position) && (!g.parts.exists(fn(p) -> p.position == partPair.partA.position))) // TODO prefer a part.id than a part.position when it will be available
                    return (parts: g.parts + partPair.partA, normalId: g.normalId)
                return g
            } else // not concerned
                g
        })
    groups + (parts: [partPair.partA, partPair.partB], normalId: partPair.normal) // new
}

sync fn exclude_asymetric_enlightenment(panels: Part[]) -> bool =
    round_at(panels.reduce(vec3(0.0, 0.0, 0.0), fn(v, p) ->
        v + ((- p.global_rotation.to_local(p.vessel.control_frame).right_vector) * p.solar_panel.value.base_flow_rate)).magnitude, accuracy) == 0.0

// sync fn deduplicate(clean: Part[][], partArr: Part[]) -> Part[][] = {
//     if(clean.length == Array.Empty)
//         clean + [partArr]
//     clean + [partArr.filter(fn(part) -> !clean.flat_map(fn(a) -> a).exists(fn(p) -> p.position == part.position))] // TODO prefer a part.id than a part.position when it will be available
// }


sync fn enlight_static_as_rotaries(staticSolarPanels: Part[][]) -> Vec3[] = {
    if(staticSolarPanels.length == Array.Empty)
        return [vec3(0.0, 0.0, 0.0)]

    staticSolarPanels
        .map(fn(circle) -> {
            const vessel = circle[Array.First].vessel
            const frame = vessel.control_frame

            const meanFlowRate = (circle.reduce(0.0, fn(sum, p) -> sum + p.solar_panel.value.base_flow_rate) / circle.length.to_float) * (Circle.Quarter / Circle.Full) // ((sum individual flow) / part_number) * mean_exposure
            const legitimAxis = (- circle[Array.First].global_rotation.to_local(frame).right_vector)
                .cross(- circle[circle.length - 1].global_rotation.to_local(frame).right_vector)
                .normalized * meanFlowRate
            if(round_at(legitimAxis.magnitude, accuracy) == 0.0)
                return random_normal(circle)
            legitimAxis
        })
}

sync fn random_normal(staticSolarPanels: Part[]) -> Vec3 = {
    const staticLightVector = staticSolarPanels
        .map(fn(p) -> - p.global_rotation.to_local(p.vessel.control_frame).right_vector.normalized * p.solar_panel.value.base_flow_rate) // coaxial to light vector, mag = max EC flow
        .reduce(vec3(0.0, 0.0, 0.0), fn(vsum, v) -> vsum + v)
    const staticLightVectorNormalCase0 = staticSolarPanels
        .reduce(vec3(0.0, 0.0, 0.0), fn(sum, p) -> sum + p.global_rotation.to_local(p.vessel.control_frame).up_vector.normalized * p.solar_panel.value.base_flow_rate)
    const staticLightVectorNormalCase1 = staticSolarPanels
        .reduce(vec3(0.0, 0.0, 0.0), fn(sum, p) -> sum + p.global_rotation.to_local(p.vessel.control_frame).vector.normalized * p.solar_panel.value.base_flow_rate)
    staticLightVector.exclude_from(if(staticLightVectorNormalCase0.magnitude > staticLightVectorNormalCase1.magnitude) staticLightVectorNormalCase0 else staticLightVectorNormalCase1)
}

sync fn aggregate_rotaries_as_plane(lightRotaries: Vec3[]) -> Vec3[] =
    lightRotaries.reduce(<Vec3>[], fn(notParallel, normal) -> {
        if(!notParallel.exists(fn(np) -> round_at(np.normalized.cross(normal.normalized).magnitude, 2) == 0.0)) // empty or not parallel
            return notParallel + normal
        return notParallel.map(fn(np) -> {
            if(round_at(np.cross(normal).magnitude, 1) == 0.0) // sum up all parallel planes
                np + (np.normalized.dot(normal.normalized) * normal) // force normal to be in the same direction than np
            else
                np
        })
    })


sync fn fasten_sum_unoriented_vectors(unorientedVectors: Vec3[], reference: Vec3) -> Vec3 =
    unorientedVectors.reduce(vec3(0.0, 0.0, 0.0), fn(vsum, v) -> {
        if(round_at(reference.normalized.dot(v.normalized), 1) != 0.0) // mostly in direction of reference, if any
            vsum + (v * (reference.normalized.dot(v.normalized)))
        else
            vsum + v
    })