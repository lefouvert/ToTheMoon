use { VesselSituation } from ksp::vessel
use { wait_until, sleep } from ksp::game

use { StagingCase } from ship::constant
use { String } from ui::constant
use { Ship } from ship::ship
use { atmosphere_depth } from body::atmosphere

pub fn stage(ship: Ship, trigger: (need: bool, reason: string)[], verbose: bool) -> bool = {
    const vessel = ship.ship
    const oldStage = vessel.staging.current
    const reason = trigger
        .filter(fn(c) -> c.need)
        .reduce(String.Empty, fn(agg, c) -> agg + (if(agg.length > 0) "|" else String.Empty) + c.reason)
    if(verbose) ship.print("(" + reason + ") -> Preparing to stage...")

    if(atmosphere_depth(vessel.main_body) > vessel.altitude_sealevel
    && vessel.situation != VesselSituation.Landed
    && vessel.situation != VesselSituation.Splashed
    && vessel.situation != VesselSituation.PreLaunch)
        ship.align(vessel.surface_velocity, 5) //vessel.main_body.body_frame

    wait_until(fn() -> vessel.staging.ready)
    vessel.staging.next()
    wait_until(fn() -> vessel.staging.ready)

    if(vessel.dynamic_pressure_kpa > 1)
        sleep(1.0)

    if(trigger[StagingCase.NOT_IGN].need)
        wait_until(fn() -> ship.stages[ship.current_stage].ignited())

    wait_until(fn() -> ship.update_stages("check_stage"))
    if(verbose)
        ship.print("STAGING (" + (oldStage).to_string() + " -> " + ship.current_stage.to_string() + ").")
    ship.check_staging(verbose)
}